from argparse import ArgumentParser


def get_train_args():
    parser = ArgumentParser(description="pretrained - ELMo")
    parser.add_argument_group()
    parser.add_argument('-phase', type=str, default='train')
    parser.add_argument('-epochs', type=int, default=20, help="number of maximum training epoch")
    parser.add_argument('-optimizer', type=str, default='adam', help='optimizer for training')
    parser.add_argument('-learning_rate', type=float, default=5e-5, help="initial learning rate of optimizer")
    parser.add_argument('-hidden_dim', type=int, default=4096, help="size of dimension of hidden vector space")
    parser.add_argument('-projection_dim', type=int, default=512, help="size of dimension of hidden vector space")
    parser.add_argument('-char_embedding_dim', type=int, default=100, help="size of character embedding (forward and backward repectively)")
    parser.add_argument('-char_fc_dim', type=int, default=6400, help="size of character embedding flatten dim (default: char_embedding_dim(100)*word_len(64)")
    parser.add_argument('-batch_size', type=int, default=32, help="size of batch in mini-batch training")
    parser.add_argument('-log_step', type=int, default=30, help="how frequently write error log in file(batch_iters)")
    parser.add_argument('-save_step', type=int, default=1, help="how frequently save the trained model(epochs)")
    parser.add_argument('-num_layers', type=int, default=1, help="number of hidden layers in RNN")
    parser.add_argument('-resume', type=int, default=0, help="resume-train")
    parser.add_argument('-dropout', type=float, default=0.5, help="dropout ratio of RNN")
    parser.add_argument('-device', type=str, default='cuda:0', help="device that contains weight parameters(cpu or cuda:0)")
    parser.add_argument('-model_path', type=str, default='', help="directory which save the model's data")
    parser.add_argument('-data_path', type=str, help="train data corpus path")
    parser.add_argument('-tensorboard_log', type=bool, default=True, help="whether use tensorboard or not")
    parser.add_argument('-pretrained_embedding', type=str, default='glove', help='pretrained word embedding model, {glove, fasttext}')
    parser.add_argument('-multi', type=int, default=0, help='using multi-gpu')
    args = parser.parse_args()
    return args


def get_test_args():
    parser = ArgumentParser(description="pretrained - ELMo")
    parser.add_argument_group()
    parser.add_argument('-phase', type=str, default='test')
    parser.add_argument('-epochs', type=int, default=20, help="number of maximum training epoch")
    parser.add_argument('-optimizer', type=str, default='adam', help='optimizer for training')
    parser.add_argument('-learning_rate', type=float, default=5e-5, help="initial learning rate of optimizer")
    parser.add_argument('-hidden_dim', type=int, default=4096, help="size of dimension of hidden vector space")
    parser.add_argument('-projection_dim', type=int, default=512, help="size of dimension of hidden vector space")
    parser.add_argument('-char_embedding_dim', type=int, default=100, help="size of character embedding (forward and backward repectively)")
    parser.add_argument('-char_fc_dim', type=int, default=6400, help="size of character embedding flatten dim (default: char_embedding_dim(100)*word_len(64)")
    parser.add_argument('-batch_size', type=int, default=32, help="size of batch in mini-batch training")
    parser.add_argument('-log_step', type=int, default=30, help="how frequently write error log in file(batch_iters)")
    parser.add_argument('-save_step', type=int, default=1, help="how frequently save the trained model(epochs)")
    parser.add_argument('-num_layers', type=int, default=1, help="number of hidden layers in RNN")
    parser.add_argument('-multi', type=int, default=0, help="multi-gpu")
    parser.add_argument('-dropout', type=float, default=0, help="dropout ratio of RNN")
    parser.add_argument('-device', type=str, default='cuda:0', help="device that contains weight parameters(cpu or cuda:0)")
    parser.add_argument('-model_path', type=str, default='', help="directory which save the model's data")
    parser.add_argument('-data_path', type=str, help="train data corpus path")
    parser.add_argument('-tensorboard_log', type=bool, default=True, help="whether use tensorboard or not")
    parser.add_argument('-pretrained_embedding', type=str, default='glove', help='pretrained word embedding model, {glove, fasttext}')
    parser.add_argument('-multi', type=int, default=0, help='using multi-gpu')
    args = parser.parse_args()
    return args